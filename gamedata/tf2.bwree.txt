"Games"
{
	"tf"
	{
		"Keys"
		{
			"CTFPlayer_BaseOffset"
			{
				"windows"	"m_bArenaSpectator"
				"linux"		"m_bArenaSpectator"
			}
			"CPopulationManager_BaseOffset"
			{
				"windows"	"m_vecOrigin"
				"linux"		"m_vecOrigin"
			}
			"CBaseObject_BaseOffset"
			{
				"windows"	"m_hBuilder"
				"linux"		"m_hBuilder"
			}
		}
		"Signatures"
		{
			"CTFPlayer::PlaySpecificSequence"
			{
				"windows"	"\x55\x8B\xEC\x56\xFF\x75\x08\x8B\xF1\xE8\x2A\x2A\x2A\x2A\x8B\xCE\x83\xF8\xFF"
				"linux"		"@_ZN9CTFPlayer20PlaySpecificSequenceEPKc"
			}
			"CTFPlayer::DoAnimationEvent"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x2C\x53\x56\x8B\x35\x2A\x2A\x2A\x2A"
				"linux"   	"@_ZN9CTFPlayer16DoAnimationEventE17PlayerAnimEvent_ti"
			}
			"CCaptureZone::Capture"
			{
				"windows"	"\x55\x8B\xEC\x51\x53\x57\x8B\x7D\x2A\x8B\xD9\x85\xFF\x0F\x84"
				"linux"		"@_ZN12CCaptureZone7CaptureEP11CBaseEntity"
			}
			"CTeamplayRoundBasedRules::PlayThrottledAlert"
			{
				"windows"	"\x55\x8B\xEC\xA1\x2A\x2A\x2A\x2A\x56\x8B\xF1\xF3\x0F\x10\x40"
				"linux"		"@_ZN24CTeamplayRoundBasedRules18PlayThrottledAlertEiPKcf"
			}
			"CTFPlayer::PostInventoryApplication"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x3C\x53\x8B\xD9\x56\x57"
				"linux"		"@_ZN9CTFPlayer24PostInventoryApplicationEv"
			}
			"CPopulationManager::GetSentryBusterDamageAndKillThreshold"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x08\x33\xC0\x89\x4D"
				"linux"		"@_ZNK18CPopulationManager37GetSentryBusterDamageAndKillThresholdERiS0_"
			}
			"CTFPlayer::RemoveObject"
			{
				"windows"	"\x55\x8B\xEC\x56\x57\x8B\xF9\x8B\xB7\x2A\x2A\x2A\x2A\x83\xEE\x01"
				"linux"		"@_ZN9CTFPlayer12RemoveObjectEP11CBaseObject"
			}
			"CPopulationManager::GetCurrentWave"
			{
				"windows"	"\x80\xB9\x2A\x2A\x2A\x2A\x00\x56\x74"
				"linux"		"@_ZN18CPopulationManager14GetCurrentWaveEv"
			}
			"CTFPlayer::DropCurrencyPack"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x18\x57\x8B\xF9\x8B\x07"
				"linux"		"@_ZN9CTFPlayer16DropCurrencyPackE17CurrencyRewards_tibP11CBasePlayer"
			}
			"CTFGameRules::DistributeCurrencyAmount"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x18\x80\x7D\x10\x00"
				"linux"		"@_ZN12CTFGameRules24DistributeCurrencyAmountEiP9CTFPlayerbbb"
			}
			"CTFBot::GetEventChangeAttributes"
			{
				"windows"	"\x55\x8B\xEC\x53\x56\x57\x8B\xF9\x33\xF6\x39\xB7\x2A\x2A\x2A\x2A\x7E\x2A\x8B\x5D\x2A\xEB"
				"linux"		"@_ZNK6CTFBot24GetEventChangeAttributesEPKc"
			}
			"CBaseObject::FindSnapToBuildPos"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x58\x53\x57\x8B\xF9\x89\x7D\xF4"
				"linux"		"@_ZN11CBaseObject18FindSnapToBuildPosEPS_"
			}
			"CTFPlayer::CanBuild"
			{
				"windows"	"\x55\x8B\xEC\x83\xEC\x0C\x53\x8B\x5D\x08\x57\x8B\xF9\x83\xFB\x03"
				"linux"		"@_ZN9CTFPlayer8CanBuildEii"
			}
			"CTFPlayer::CanBeForcedToLaugh"
			{
				"windows"	"\xA1\x2A\x2A\x2A\x2A\x56\x8B\xF1\x85\xC0\x74\x2A\x80\xB8\x2A\x2A\x2A\x2A\x00\x74\x2A\x8B\x06"
				"linux"		"@_ZN9CTFPlayer18CanBeForcedToLaughEv"
			}
		}
		"Offsets"
		{
			//These are virtual function offsets
			"CBaseCombatWeapon::Clip1"
			{
				"windows"	"345"
				"linux"		"351"
			}
			"CTFItem::PickUp"
			{
				"windows"	"232"
				"linux"		"270"
			}
			"CBaseEntity::ShouldCollide"
			{
				"windows"	"17"
				"windows64"	"17"
				"linux"		"18"
				"linux64"	"18"
			}
			"CBaseEntity::ShouldTransmit"		
			{
				"windows"	"20"
				"linux"		"21"
			}
			"CBaseEntity::Event_Killed"
			{
				"windows"	"68"
				"linux"		"69"
			}
			"CBaseFilter::PassesFilterImpl"
			{
				"windows"	"199"
				"linux"		"200"
			}
			"CBaseCombatCharacter::ShouldGib"
			{
				"windows"	"297"
				"linux"		"298"
			}
			"CBaseEntity::AcceptInput"
			{
				"windows"	"38"
				"linux"		"39"
			}
			"CBasePlayer::ForceRespawn"
			{
				"windows"	"337"
				"linux"		"338"
			}
			"CBaseObject::CanBeUpgraded" //CanBeUpgraded( CTFPlayer *pPlayer )
			{
				"windows"	"383"
				"linux"		"384"
			}
			//These numbers are used to calculate the actual offset based on the base netprop offset in the Keys section
			//The calculation formula is base offset + this number
			"CTFPlayer::m_nDeployingBombState"
			{
				"windows"	"4" //build 8622567: 9272
				"linux"		"4" //build 8622567: 9276
			}
			"CTFPlayer::m_bIsMissionEnemy"
			{
				"windows"	"8" //build 9050375: 9276
				"linux"		"8" //build 9050375: 9280
			}
			"CTFPlayer::m_bIsSupportEnemy"
			{
				"windows"	"9" //build 9115164: 9277
				"linux"		"9" //build 9115164: 9281
			}
			"CTFPlayer::m_accumulatedSentryGunDamageDealt"
			{
				"windows"	"268" //build 8622567: 9536
				"linux"		"268" //build 8622567: 9540
			}
			"CTFPlayer::m_accumulatedSentryGunKillCount"
			{
				"windows"	"272" //build 8622567: 9540
				"linux"		"272" //build 8622567: 9544
			}
			"CPopulationManager::m_nMvMEventPopfileType"
			{
				"windows"	"636" //build 9290789: 1468
				"linux"		"636" //build 9290789: 1492
			}
			"CPopulationManager::m_canBotsAttackWhileInSpawnRoom"
			{
				"windows"	"645" //build 8622567: 1477
				"linux"		"645" //build 8622567: 1501
			}
			"CPopulationManager::m_bSpawningPaused"
			{
				"windows"	"716" //build 8835751: 1548
				"linux"		"716" //build 8835751: 1572
			}
			"CBaseObject::m_vecBuildOrigin"
			{
				"windows"	"4" //build 9290789: 2324
				"linux"		"4" //build 9290789: 2348
			}
			//These are raw offset values and are not used for any calculations
			"CWave::m_nSentryBustersSpawned"
			{
				"windows"	"44"
				"linux"		"44"
			}
			"CWave::m_nNumEngineersTeleportSpawned"
			{
				"windows"	"48"
				"linux"		"48"
			}
			"CWave::m_nNumSentryBustersKilled"
			{
				"windows"	"52"
				"linux"		"52"
			}
			"CTFNavArea::m_distanceToBombTarget"
			{
				"windows"	"548"
				"linux"		"552"
			}
		}
		"Functions"
		{
			"CTFBot::GetEventChangeAttributes"
			{
				"signature" "CTFBot::GetEventChangeAttributes"
				"callconv"	"thiscall"
				"return"	"int" //EventChangeAttributes_t
				"this"		"entity"
				"arguments"
				{
					"pzaEventName"
					{
						"type"	"charptr"
					}
				}
			}
			"CBaseObject::FindSnapToBuildPos"
			{
				"signature"	"CBaseObject::FindSnapToBuildPos"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"pObjectOverride"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CTFPlayer::CanBuild"
			{
				"signature"	"CTFPlayer::CanBuild"
				"callconv"	"thiscall"
				"return"	"int"
				"this"		"entity"
				"arguments"
				{
					"iObjectType"
					{
						"type"	"int"
					}
					"iObjectMode"
					{
						"type"	"int"
					}
				}
			}
			"CTFPlayer::CanBeForcedToLaugh"
			{
				"signature" "CTFPlayer::CanBeForcedToLaugh"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
			}
			"CBaseEntity::ShouldTransmit"
			{
				"offset"	"CBaseEntity::ShouldTransmit"
				"hooktype"	"entity"
				"return"	"int"
				"this"		"entity"
				"arguments"
				{
					"cchecktransmitinfo"
					{
						"type"	"objectptr"
					}
				}
			}
			"CBaseEntity::Event_Killed"
			{
				"offset"	"CBaseEntity::Event_Killed"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"info"
					{
						"type"	"objectptr"
						"flags"	"byref"
					}
				}
			}
			"CBaseFilter::PassesFilterImpl"
			{
				"offset"	"CBaseFilter::PassesFilterImpl"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"pCaller"
					{
						"type"	"cbaseentity"
					}
					"pEntity"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CBaseCombatCharacter::ShouldGib"
			{
				"offset"	"CBaseCombatCharacter::ShouldGib"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"info"
					{
						"type"	"objectptr"
						"flags"	"byref"
					}
				}
			}
			"CBaseEntity::AcceptInput"
			{
				"offset"		"CBaseEntity::AcceptInput"
				"hooktype"		"entity"
				"return"		"bool"
				"this"			"entity"
				"arguments"
				{
					"szInputName"
					{
						"type"	"charptr"
					}
					"pActivator"
					{
						"type"	"cbaseentity"
					}
					"pCaller"
					{
						"type"	"cbaseentity"
					}
					"Value"
					{
						"windows"
						{
							"type"	"object"
							"size"	"20"
						}
						"linux"
						{
							"type"	"objectptr"
						}
					}
					"outputID"
					{
						"type"	"int"
					}
				}
			}
			"CBasePlayer::ForceRespawn"
			{
				"offset"	"CBasePlayer::ForceRespawn"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CBaseObject::CanBeUpgraded"
			{
				"offset"	"CBaseObject::CanBeUpgraded"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"pPlayer"
					{
						"type"	"cbaseentity"
					}
				}
			}
		}
	}
}